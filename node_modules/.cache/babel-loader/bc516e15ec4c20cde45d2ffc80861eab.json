{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport { request } from \"@/request\";\nexport const crud = {\n  resetState: () => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_STATE\n    });\n  },\n  resetAction: actionType => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_ACTION,\n      keyState: actionType,\n      payload: null\n    });\n  },\n  currentItem: data => async dispatch => {\n    dispatch({\n      type: actionTypes.CURRENT_ITEM,\n      payload: { ...data\n      }\n    });\n  },\n  currentAction: (actionType, data) => async dispatch => {\n    dispatch({\n      type: actionTypes.CURRENT_ACTION,\n      keyState: actionType,\n      payload: { ...data\n      }\n    });\n  },\n  list: (entity, currentPage = 1) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"list\",\n      payload: null\n    });\n    let data = await request.list(entity, {\n      page: currentPage\n    });\n\n    if (data.success === true) {\n      const result = {\n        items: data.result,\n        pagination: {\n          current: parseInt(data.pagination.page, 10),\n          pageSize: 10,\n          total: parseInt(data.pagination.count, 10)\n        }\n      };\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"list\",\n        payload: result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"list\",\n        payload: null\n      });\n    }\n  },\n  create: (entity, jsonData) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"create\",\n      payload: null\n    });\n    console.log(\"jsonData action redux\", jsonData);\n    let data = await request.create(entity, jsonData);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"create\",\n        payload: data.result\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"create\",\n        payload: null\n      });\n    }\n  },\n  read: (entity, itemId) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"read\",\n      payload: null\n    });\n    let data = await request.read(entity, itemId);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result\n      });\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"read\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"read\",\n        payload: null\n      });\n    }\n  },\n  update: (entity, itemId, jsonData) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"update\",\n      payload: null\n    });\n    let data = await request.update(entity, itemId, jsonData);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"update\",\n        payload: data.result\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"update\",\n        payload: null\n      });\n    }\n  },\n  delete: (entity, itemId) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"delete\",\n      payload: null\n    });\n    let data = await request.delete(entity, itemId);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"delete\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"delete\",\n        payload: null\n      });\n    }\n  },\n  search: (entity, source, option) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"search\",\n      payload: null\n    });\n    source.cancel();\n    source = request.source();\n    let data = await request.search(entity, source, option);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"search\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"search\",\n        payload: null\n      });\n    }\n  }\n};","map":{"version":3,"sources":["D:/coding-space/Reactjs/starter-antd-admin-crud-auth-mern/frontend/src/redux/crud/actions.js"],"names":["actionTypes","request","crud","resetState","dispatch","type","RESET_STATE","resetAction","actionType","RESET_ACTION","keyState","payload","currentItem","data","CURRENT_ITEM","currentAction","CURRENT_ACTION","list","entity","currentPage","REQUEST_LOADING","page","success","result","items","pagination","current","parseInt","pageSize","total","count","REQUEST_SUCCESS","REQUEST_FAILED","create","jsonData","console","log","read","itemId","update","delete","search","source","option","cancel"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./types\";\r\nimport { request } from \"@/request\";\r\n\r\nexport const crud = {\r\n  resetState: () => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.RESET_STATE,\r\n    });\r\n  },\r\n  resetAction: (actionType) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.RESET_ACTION,\r\n      keyState: actionType,\r\n      payload: null,\r\n    });\r\n  },\r\n  currentItem: (data) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.CURRENT_ITEM,\r\n      payload: { ...data },\r\n    });\r\n  },\r\n  currentAction: (actionType, data) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.CURRENT_ACTION,\r\n      keyState: actionType,\r\n      payload: { ...data },\r\n    });\r\n  },\r\n  list: (entity, currentPage = 1) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"list\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.list(entity, { page: currentPage });\r\n\r\n    if (data.success === true) {\r\n      const result = {\r\n        items: data.result,\r\n        pagination: {\r\n          current: parseInt(data.pagination.page, 10),\r\n          pageSize: 10,\r\n          total: parseInt(data.pagination.count, 10),\r\n        },\r\n      };\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"list\",\r\n        payload: result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"list\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  create: (entity, jsonData) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"create\",\r\n      payload: null,\r\n    });\r\n    console.log(\"jsonData action redux\", jsonData);\r\n    let data = await request.create(entity, jsonData);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"create\",\r\n        payload: data.result,\r\n      });\r\n\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"create\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  read: (entity, itemId) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"read\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.read(entity, itemId);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.result,\r\n      });\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"read\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"read\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  update: (entity, itemId, jsonData) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"update\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.update(entity, itemId, jsonData);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"update\",\r\n        payload: data.result,\r\n      });\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"update\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n\r\n  delete: (entity, itemId) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"delete\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.delete(entity, itemId);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"delete\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"delete\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n\r\n  search: (entity, source, option) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"search\",\r\n      payload: null,\r\n    });\r\n\r\n    source.cancel();\r\n\r\n    source = request.source();\r\n    let data = await request.search(entity, source, option);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"search\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"search\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}