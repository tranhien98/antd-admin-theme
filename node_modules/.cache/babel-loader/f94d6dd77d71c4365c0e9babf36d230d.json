{"ast":null,"code":"var _jsxFileName = \"D:\\\\coding-space\\\\Reactjs\\\\starter-antd-admin-crud-auth-mern\\\\frontend\\\\src\\\\modules\\\\AdminCrudModule\\\\UpdatePassword.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectUpdatedItem } from \"@/redux/crud/selectors\";\nimport { Button, Form, Input } from \"antd\";\nimport { LockOutlined } from \"@ant-design/icons\";\nimport Loading from \"@/components/Loading\";\nimport useOnFetch from \"@/hooks/useOnFetch\";\nimport { request } from \"@/request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdatePassword({\n  config\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    current\n  } = useSelector(selectUpdatedItem);\n  const {\n    state\n  } = useCrudContext();\n  const [form] = Form.useForm();\n  const {\n    onFetch,\n    result,\n    isLoading,\n    isSuccess\n  } = useOnFetch();\n\n  const handelSubmit = fieldsValue => {\n    const id = current._id;\n\n    const updateFn = () => {\n      return request.patch(\"admin/password-update/\" + id, fieldsValue);\n    };\n\n    onFetch(updateFn);\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      // readBox.open();\n      form.resetFields();\n      dispatch(crud.resetAction(\"update\"));\n    }\n  }, [isSuccess]);\n  const {\n    isAdvancedBoxOpen\n  } = state;\n  const show = isAdvancedBoxOpen ? {\n    display: \"block\",\n    opacity: 1\n  } : {\n    display: \"none\",\n    opacity: 0\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: show,\n    children: /*#__PURE__*/_jsxDEV(Loading, {\n      isLoading: isLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Update Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        layout: \"vertical\",\n        onFinish: handelSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"New Password\",\n          name: \"password\",\n          rules: [{\n            required: true,\n            message: \"Please input your Password!\",\n            len: 8\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            prefix: /*#__PURE__*/_jsxDEV(LockOutlined, {\n              className: \"site-form-item-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 23\n            }, this),\n            type: \"password\",\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdatePassword, \"HM5n1q1vLCJ3GS8s08+jUrVaEOA=\", false, function () {\n  return [useDispatch, useSelector, useCrudContext, Form.useForm, useOnFetch];\n});\n\n_c = UpdatePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePassword\");","map":{"version":3,"sources":["D:/coding-space/Reactjs/starter-antd-admin-crud-auth-mern/frontend/src/modules/AdminCrudModule/UpdatePassword.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","crud","useCrudContext","selectUpdatedItem","Button","Form","Input","LockOutlined","Loading","useOnFetch","request","UpdatePassword","config","dispatch","current","state","form","useForm","onFetch","result","isLoading","isSuccess","handelSubmit","fieldsValue","id","_id","updateFn","patch","resetFields","resetAction","isAdvancedBoxOpen","show","display","opacity","required","message","len"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { crud } from \"@/redux/crud/actions\";\r\nimport { useCrudContext } from \"@/context/crud\";\r\nimport { selectUpdatedItem } from \"@/redux/crud/selectors\";\r\n\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { LockOutlined } from \"@ant-design/icons\";\r\nimport Loading from \"@/components/Loading\";\r\nimport useOnFetch from \"@/hooks/useOnFetch\";\r\nimport { request } from \"@/request\";\r\n\r\nexport default function UpdatePassword({ config }) {\r\n  const dispatch = useDispatch();\r\n  const { current } = useSelector(selectUpdatedItem);\r\n\r\n  const { state } = useCrudContext();\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const { onFetch, result, isLoading, isSuccess } = useOnFetch();\r\n\r\n  const handelSubmit = (fieldsValue) => {\r\n    const id = current._id;\r\n    const updateFn = () => {\r\n      return request.patch(\"admin/password-update/\" + id, fieldsValue);\r\n    };\r\n    onFetch(updateFn);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      // readBox.open();\r\n      form.resetFields();\r\n      dispatch(crud.resetAction(\"update\"));\r\n    }\r\n  }, [isSuccess]);\r\n\r\n  const { isAdvancedBoxOpen } = state;\r\n\r\n  const show = isAdvancedBoxOpen\r\n    ? { display: \"block\", opacity: 1 }\r\n    : { display: \"none\", opacity: 0 };\r\n\r\n  return (\r\n    <div style={show}>\r\n      <Loading isLoading={isLoading}>\r\n        <h3>Update Password</h3>\r\n        <div className=\"space\"></div>\r\n        <Form form={form} layout=\"vertical\" onFinish={handelSubmit}>\r\n          <Form.Item\r\n            label=\"New Password\"\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input your Password!\",\r\n                len: 8,\r\n              },\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Update\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Loading>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}