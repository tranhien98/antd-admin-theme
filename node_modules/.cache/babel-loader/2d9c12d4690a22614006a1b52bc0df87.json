{"ast":null,"code":"var _jsxFileName = \"D:\\\\coding-space\\\\Reactjs\\\\starter-antd-admin-crud-auth-mern\\\\frontend\\\\src\\\\components\\\\SearchItem\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { AutoComplete, Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { request } from \"@/request\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectSearchedItems } from \"@/redux/crud/selectors\";\nimport { Empty } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchItem({\n  config\n}) {\n  _s();\n\n  let {\n    entity,\n    searchConfig\n  } = config;\n  const {\n    displayLabels,\n    searchFields,\n    outputValue = \"_id\"\n  } = searchConfig;\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  const {\n    crudContextAction\n  } = useCrudContext();\n  const {\n    panel,\n    collapsedBox,\n    readBox\n  } = crudContextAction;\n  let source = request.source();\n  const {\n    result,\n    isLoading,\n    isSuccess\n  } = useSelector(selectSearchedItems);\n  const isTyping = useRef(false);\n  let delayTimer = null;\n  useEffect(() => {\n    isLoading && setOptions([{\n      label: \"... Searching\"\n    }]);\n  }, [isLoading]);\n\n  const onSearch = searchText => {\n    isTyping.current = true;\n    clearTimeout(delayTimer);\n    delayTimer = setTimeout(function () {\n      if (isTyping.current && searchText !== \"\") {\n        dispatch(crud.search(entity, source, {\n          question: searchText,\n          fields: searchFields\n        }));\n      }\n\n      isTyping.current = false;\n    }, 500);\n  };\n\n  const onSelect = data => {\n    const currentItem = result.find(item => {\n      return item[outputValue] === data;\n    });\n    dispatch(crud.currentItem(currentItem));\n    panel.open();\n    collapsedBox.open();\n    readBox.open();\n  };\n\n  const onChange = data => {\n    const currentItem = options.find(item => {\n      return item.value === data;\n    });\n    const currentValue = currentItem ? currentItem.label : data;\n    setValue(currentValue);\n  };\n\n  useEffect(() => {\n    let optionResults = [];\n    result.map(item => {\n      const labels = displayLabels.map(x => item[x]).join(\" \");\n      optionResults.push({\n        label: labels,\n        value: item[outputValue]\n      });\n    });\n    setOptions(optionResults);\n  }, [result]);\n  return /*#__PURE__*/_jsxDEV(AutoComplete, {\n    value: value,\n    options: options,\n    style: {\n      width: \"100%\"\n    },\n    onSelect: onSelect,\n    onSearch: onSearch,\n    onChange: onChange,\n    notFoundContent: !isSuccess ? /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }, this) : \"\",\n    allowClear: true,\n    placeholder: \"Your Search here\",\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      suffix: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchItem, \"gx2AO2cziHyj1dOH+rjiPjhocMM=\", false, function () {\n  return [useDispatch, useCrudContext, useSelector];\n});\n\n_c = SearchItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchItem\");","map":{"version":3,"sources":["D:/coding-space/Reactjs/starter-antd-admin-crud-auth-mern/frontend/src/components/SearchItem/index.jsx"],"names":["React","useEffect","useState","useRef","AutoComplete","Input","SearchOutlined","useSelector","useDispatch","crud","request","useCrudContext","selectSearchedItems","Empty","SearchItem","config","entity","searchConfig","displayLabels","searchFields","outputValue","dispatch","value","setValue","options","setOptions","crudContextAction","panel","collapsedBox","readBox","source","result","isLoading","isSuccess","isTyping","delayTimer","label","onSearch","searchText","current","clearTimeout","setTimeout","search","question","fields","onSelect","data","currentItem","find","item","open","onChange","currentValue","optionResults","map","labels","x","join","push","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { AutoComplete, Input } from \"antd\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { crud } from \"@/redux/crud/actions\";\r\nimport { request } from \"@/request\";\r\nimport { useCrudContext } from \"@/context/crud\";\r\nimport { selectSearchedItems } from \"@/redux/crud/selectors\";\r\n\r\nimport { Empty } from \"antd\";\r\n\r\nexport default function SearchItem({ config }) {\r\n  let { entity, searchConfig } = config;\r\n\r\n  const { displayLabels, searchFields, outputValue = \"_id\" } = searchConfig;\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState(\"\");\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const { crudContextAction } = useCrudContext();\r\n  const { panel, collapsedBox, readBox } = crudContextAction;\r\n\r\n  let source = request.source();\r\n  const { result, isLoading, isSuccess } = useSelector(selectSearchedItems);\r\n\r\n  const isTyping = useRef(false);\r\n\r\n  let delayTimer = null;\r\n  useEffect(() => {\r\n    isLoading && setOptions([{ label: \"... Searching\" }]);\r\n  }, [isLoading]);\r\n  const onSearch = (searchText) => {\r\n    isTyping.current = true;\r\n\r\n    clearTimeout(delayTimer);\r\n    delayTimer = setTimeout(function () {\r\n      if (isTyping.current && searchText !== \"\") {\r\n        dispatch(\r\n          crud.search(entity, source, {\r\n            question: searchText,\r\n            fields: searchFields,\r\n          })\r\n        );\r\n      }\r\n      isTyping.current = false;\r\n    }, 500);\r\n  };\r\n\r\n  const onSelect = (data) => {\r\n    const currentItem = result.find((item) => {\r\n      return item[outputValue] === data;\r\n    });\r\n\r\n    dispatch(crud.currentItem(currentItem));\r\n    panel.open();\r\n    collapsedBox.open();\r\n    readBox.open();\r\n  };\r\n\r\n  const onChange = (data) => {\r\n    const currentItem = options.find((item) => {\r\n      return item.value === data;\r\n    });\r\n    const currentValue = currentItem ? currentItem.label : data;\r\n    setValue(currentValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let optionResults = [];\r\n\r\n    result.map((item) => {\r\n      const labels = displayLabels.map((x) => item[x]).join(\" \");\r\n      optionResults.push({ label: labels, value: item[outputValue] });\r\n    });\r\n\r\n    setOptions(optionResults);\r\n  }, [result]);\r\n\r\n  return (\r\n    <AutoComplete\r\n      value={value}\r\n      options={options}\r\n      style={{\r\n        width: \"100%\",\r\n      }}\r\n      onSelect={onSelect}\r\n      onSearch={onSearch}\r\n      onChange={onChange}\r\n      notFoundContent={!isSuccess ? <Empty /> : \"\"}\r\n      allowClear={true}\r\n      placeholder=\"Your Search here\"\r\n    >\r\n      <Input suffix={<SearchOutlined />} />\r\n    </AutoComplete>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}